package academy.maze.utils;

import academy.maze.dto.CellType;
import academy.maze.dto.Maze;
import academy.maze.dto.Path;
import academy.maze.dto.Point;
import java.io.PrintWriter;
import static academy.maze.dto.Maze.copy;
import static academy.maze.utils.Utils.createStartAndEnd;

/**
 * –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª—ã.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ ASCII, —Ç–∞–∫ –∏ Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
public class MazeVisualizer {
    private final boolean useUnicode;

    /**
     * –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
     *
     * @param useUnicode –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public MazeVisualizer(boolean useUnicode) {
        this.useUnicode = useUnicode;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public void displayMaze(Maze maze) {
        displayMaze(maze, Path.empty());
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param path –ø—É—Ç—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    public void displayMaze(Maze maze, Path path) {
        printMazeToConsole(createSolutionMaze(maze, path));
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –≤ —Ñ–∞–π–ª.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @param filename –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    public void saveMazeToFile(Maze maze, String filename) {
        saveMazeToFile(maze, Path.empty(), filename);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @param path –ø—É—Ç—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
     * @param filename –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    public void saveMazeToFile(Maze maze, Path path, String filename) {
        try (PrintWriter writer = new PrintWriter(filename)) {
            printMazeToWriter(createSolutionMaze(maze, path), writer);
        } catch (Exception e) {
            throw new RuntimeException("Error saving maze to file: " + filename, e);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—É—Ç–∏ —Ä–µ—à–µ–Ω–∏—è.
     *
     * @param maze –∏—Å—Ö–æ–¥–Ω—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç
     * @param path –ø—É—Ç—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
     * @return –ª–∞–±–∏—Ä–∏–Ω—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—É—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
     */
    public Maze createSolutionMaze(Maze maze, Path path) {
        Maze solutionMaze = copy(maze);

        if (maze.width() <= 3 || maze.height() <= 3) {
            solutionMaze.setCell(1, 1, CellType.PATH);
            return solutionMaze;
        }

        if (!path.isEmpty()) {
            Point start = path.getStart();
            Point end = path.getEnd();

            createStartAndEnd(maze, start, end);

            for (Point point : path.points()) {
                CellType current = maze.getCell(point);
                if (current != CellType.START && current != CellType.END) {
                    solutionMaze.setCell(point, CellType.SOLUTION_PATH);
                }
            }
        }

        return solutionMaze;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
     */
    private void printMazeToConsole(Maze maze) {
        for (int y = 0; y < maze.height(); y++) {
            for (int x = 0; x < maze.width(); x++) {
                CellType cell = maze.getCell(x, y);
                System.out.print(getSymbol(cell));
            }
            System.out.println();
        }
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –≤ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ PrintWriter.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
     * @param writer –ø–∏—Å–∞—Ç–µ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞
     */
    private void printMazeToWriter(Maze maze, PrintWriter writer) {
        for (int y = 0; y < maze.height(); y++) {
            for (int x = 0; x < maze.width(); x++) {
                CellType cell = maze.getCell(x, y);
                writer.print(getSymbol(cell));
            }
            writer.println();
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ —è—á–µ–π–∫–∏.
     *
     * @param cellType —Ç–∏–ø —è—á–µ–π–∫–∏
     * @return —Å–∏–º–≤–æ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String getSymbol(CellType cellType) {
        if (useUnicode) {
            return switch (cellType) {
                case WALL -> "‚¨õ";
                case PATH -> "‚¨ú";
                case START -> "üö©";
                case END -> "üèÅ";
                case SOLUTION_PATH -> "üíé";
                case SAND -> null;
                case COIN -> null;
            };
        }
        else {
            return cellType.getSymbol();
        }
    }
}
